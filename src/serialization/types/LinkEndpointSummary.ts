/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { PartBaseSummary } from "./PartBaseSummary";
import { ConversationSummary } from "./ConversationSummary";
import { IssueSummary } from "./IssueSummary";
import { WorkBaseSummary } from "./WorkBaseSummary";
import { TicketSummary } from "./TicketSummary";

export const LinkEndpointSummary: core.serialization.Schema<
    serializers.LinkEndpointSummary.Raw,
    DevRev.LinkEndpointSummary
> = core.serialization
    .union("type", {
        capability: PartBaseSummary,
        conversation: ConversationSummary,
        enhancement: PartBaseSummary,
        feature: PartBaseSummary,
        issue: IssueSummary,
        opportunity: WorkBaseSummary,
        product: PartBaseSummary,
        task: WorkBaseSummary,
        ticket: TicketSummary,
    })
    .transform<DevRev.LinkEndpointSummary>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace LinkEndpointSummary {
    type Raw =
        | LinkEndpointSummary.Capability
        | LinkEndpointSummary.Conversation
        | LinkEndpointSummary.Enhancement
        | LinkEndpointSummary.Feature
        | LinkEndpointSummary.Issue
        | LinkEndpointSummary.Opportunity
        | LinkEndpointSummary.Product
        | LinkEndpointSummary.Task
        | LinkEndpointSummary.Ticket;

    interface Capability extends PartBaseSummary.Raw {
        type: "capability";
    }

    interface Conversation extends ConversationSummary.Raw {
        type: "conversation";
    }

    interface Enhancement extends PartBaseSummary.Raw {
        type: "enhancement";
    }

    interface Feature extends PartBaseSummary.Raw {
        type: "feature";
    }

    interface Issue extends IssueSummary.Raw {
        type: "issue";
    }

    interface Opportunity extends WorkBaseSummary.Raw {
        type: "opportunity";
    }

    interface Product extends PartBaseSummary.Raw {
        type: "product";
    }

    interface Task extends WorkBaseSummary.Raw {
        type: "task";
    }

    interface Ticket extends TicketSummary.Raw {
        type: "ticket";
    }
}
