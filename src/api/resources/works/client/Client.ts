/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevRev from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Works {
    interface Options {
        environment?: core.Supplier<environments.DevRevEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

/**
 * DevRev work interactions.
 */
export class Works {
    constructor(protected readonly _options: Works.Options = {}) {}

    /**
     * Creates new work ([issue](https://devrev.ai/docs/product/build),
     * [ticket](https://devrev.ai/docs/product/support)) item.
     * [task](https://docs.devrev.ai/product/tasks) and opportunity work types
     * are supported in the beta version.
     *
     * @param {DevRev.WorksCreateRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.create({
     *         type: "issue",
     *         appliesToPart: "string",
     *         artifacts: ["string"],
     *         body: "string",
     *         customFields: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         },
     *         customSchemaFragments: ["string"],
     *         customSchemaSpec: {
     *             apps: ["string"],
     *             subtype: "string",
     *             tenantFragment: true,
     *             validateRequiredFields: true
     *         },
     *         ownedBy: ["string"],
     *         reportedBy: ["string"],
     *         stage: {
     *             id: "string",
     *             name: "string"
     *         },
     *         stageValidationOptions: ["allow_non_start"],
     *         tags: [{
     *                 id: "string",
     *                 value: "string"
     *             }],
     *         targetCloseDate: new Date("2024-01-15T09:30:00.000Z"),
     *         title: "string",
     *         developedWith: ["string"],
     *         priority: DevRev.IssuePriority.P0,
     *         priorityV2: 1,
     *         sprint: "string",
     *         targetStartDate: new Date("2024-01-15T09:30:00.000Z")
     *     })
     */
    public async create(
        request: DevRev.WorksCreateRequest,
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksCreateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.create"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksCreateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a work item.
     *
     * @param {DevRev.WorksDeleteRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.NotFoundError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.delete({
     *         id: "ISS-12345"
     *     })
     */
    public async delete(
        request: DevRev.WorksDeleteRequest,
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksDeleteResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.delete"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksDeleteRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new DevRev.NotFoundError(
                        serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Exports a collection of work items.
     *
     * @param {DevRev.WorksExportQuery} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.export()
     */
    public async export(
        request: DevRev.WorksExportQuery = {},
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksExportResponse> {
        const {
            appliesToPart,
            createdBy,
            customFields,
            first,
            issueAccounts,
            issuePriority,
            issuePriorityV2,
            issueRevOrgs,
            issueSlaSummaryStage,
            issueSprint,
            issueSubtype,
            opportunityAccount,
            opportunityContacts,
            opportunitySubtype,
            ownedBy,
            reportedBy,
            sortBy,
            stageName,
            stagedInfoIsStaged,
            syncMetadataLastSyncInStatus,
            syncMetadataLastSyncInSyncUnit,
            syncMetadataLastSyncOutStatus,
            syncMetadataLastSyncOutSyncUnit,
            syncMetadataOriginSystem,
            tags,
            ticketChannels,
            ticketGroup,
            ticketIsSpam,
            ticketNeedsResponse,
            ticketRevOrg,
            ticketSeverity,
            ticketSlaSummaryStage,
            ticketSourceChannel,
            ticketSubtype,
            type: type_,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (appliesToPart != null) {
            if (Array.isArray(appliesToPart)) {
                _queryParams["applies_to_part"] = appliesToPart.map((item) => item);
            } else {
                _queryParams["applies_to_part"] = appliesToPart;
            }
        }

        if (createdBy != null) {
            if (Array.isArray(createdBy)) {
                _queryParams["created_by"] = createdBy.map((item) => item);
            } else {
                _queryParams["created_by"] = createdBy;
            }
        }

        if (customFields != null) {
            _queryParams["custom_fields"] = JSON.stringify(customFields);
        }

        if (first != null) {
            _queryParams["first"] = first.toString();
        }

        if (issueAccounts != null) {
            if (Array.isArray(issueAccounts)) {
                _queryParams["issue.accounts"] = issueAccounts.map((item) => item);
            } else {
                _queryParams["issue.accounts"] = issueAccounts;
            }
        }

        if (issuePriority != null) {
            if (Array.isArray(issuePriority)) {
                _queryParams["issue.priority"] = issuePriority.map((item) => item);
            } else {
                _queryParams["issue.priority"] = issuePriority;
            }
        }

        if (issuePriorityV2 != null) {
            if (Array.isArray(issuePriorityV2)) {
                _queryParams["issue.priority_v2"] = issuePriorityV2.map((item) => item.toString());
            } else {
                _queryParams["issue.priority_v2"] = issuePriorityV2.toString();
            }
        }

        if (issueRevOrgs != null) {
            if (Array.isArray(issueRevOrgs)) {
                _queryParams["issue.rev_orgs"] = issueRevOrgs.map((item) => item);
            } else {
                _queryParams["issue.rev_orgs"] = issueRevOrgs;
            }
        }

        if (issueSlaSummaryStage != null) {
            if (Array.isArray(issueSlaSummaryStage)) {
                _queryParams["issue.sla_summary.stage"] = issueSlaSummaryStage.map((item) => item);
            } else {
                _queryParams["issue.sla_summary.stage"] = issueSlaSummaryStage;
            }
        }

        if (issueSprint != null) {
            if (Array.isArray(issueSprint)) {
                _queryParams["issue.sprint"] = issueSprint.map((item) => item);
            } else {
                _queryParams["issue.sprint"] = issueSprint;
            }
        }

        if (issueSubtype != null) {
            if (Array.isArray(issueSubtype)) {
                _queryParams["issue.subtype"] = issueSubtype.map((item) => item);
            } else {
                _queryParams["issue.subtype"] = issueSubtype;
            }
        }

        if (opportunityAccount != null) {
            if (Array.isArray(opportunityAccount)) {
                _queryParams["opportunity.account"] = opportunityAccount.map((item) => item);
            } else {
                _queryParams["opportunity.account"] = opportunityAccount;
            }
        }

        if (opportunityContacts != null) {
            if (Array.isArray(opportunityContacts)) {
                _queryParams["opportunity.contacts"] = opportunityContacts.map((item) => item);
            } else {
                _queryParams["opportunity.contacts"] = opportunityContacts;
            }
        }

        if (opportunitySubtype != null) {
            if (Array.isArray(opportunitySubtype)) {
                _queryParams["opportunity.subtype"] = opportunitySubtype.map((item) => item);
            } else {
                _queryParams["opportunity.subtype"] = opportunitySubtype;
            }
        }

        if (ownedBy != null) {
            if (Array.isArray(ownedBy)) {
                _queryParams["owned_by"] = ownedBy.map((item) => item);
            } else {
                _queryParams["owned_by"] = ownedBy;
            }
        }

        if (reportedBy != null) {
            if (Array.isArray(reportedBy)) {
                _queryParams["reported_by"] = reportedBy.map((item) => item);
            } else {
                _queryParams["reported_by"] = reportedBy;
            }
        }

        if (sortBy != null) {
            if (Array.isArray(sortBy)) {
                _queryParams["sort_by"] = sortBy.map((item) => item);
            } else {
                _queryParams["sort_by"] = sortBy;
            }
        }

        if (stageName != null) {
            if (Array.isArray(stageName)) {
                _queryParams["stage.name"] = stageName.map((item) => item);
            } else {
                _queryParams["stage.name"] = stageName;
            }
        }

        if (stagedInfoIsStaged != null) {
            _queryParams["staged_info.is_staged"] = stagedInfoIsStaged.toString();
        }

        if (syncMetadataLastSyncInStatus != null) {
            if (Array.isArray(syncMetadataLastSyncInStatus)) {
                _queryParams["sync_metadata.last_sync_in.status"] = syncMetadataLastSyncInStatus.map((item) => item);
            } else {
                _queryParams["sync_metadata.last_sync_in.status"] = syncMetadataLastSyncInStatus;
            }
        }

        if (syncMetadataLastSyncInSyncUnit != null) {
            if (Array.isArray(syncMetadataLastSyncInSyncUnit)) {
                _queryParams["sync_metadata.last_sync_in.sync_unit"] = syncMetadataLastSyncInSyncUnit.map(
                    (item) => item
                );
            } else {
                _queryParams["sync_metadata.last_sync_in.sync_unit"] = syncMetadataLastSyncInSyncUnit;
            }
        }

        if (syncMetadataLastSyncOutStatus != null) {
            if (Array.isArray(syncMetadataLastSyncOutStatus)) {
                _queryParams["sync_metadata.last_sync_out.status"] = syncMetadataLastSyncOutStatus.map((item) => item);
            } else {
                _queryParams["sync_metadata.last_sync_out.status"] = syncMetadataLastSyncOutStatus;
            }
        }

        if (syncMetadataLastSyncOutSyncUnit != null) {
            if (Array.isArray(syncMetadataLastSyncOutSyncUnit)) {
                _queryParams["sync_metadata.last_sync_out.sync_unit"] = syncMetadataLastSyncOutSyncUnit.map(
                    (item) => item
                );
            } else {
                _queryParams["sync_metadata.last_sync_out.sync_unit"] = syncMetadataLastSyncOutSyncUnit;
            }
        }

        if (syncMetadataOriginSystem != null) {
            if (Array.isArray(syncMetadataOriginSystem)) {
                _queryParams["sync_metadata.origin_system"] = syncMetadataOriginSystem.map((item) => item);
            } else {
                _queryParams["sync_metadata.origin_system"] = syncMetadataOriginSystem;
            }
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                _queryParams["tags"] = tags.map((item) => item);
            } else {
                _queryParams["tags"] = tags;
            }
        }

        if (ticketChannels != null) {
            if (Array.isArray(ticketChannels)) {
                _queryParams["ticket.channels"] = ticketChannels.map((item) => item);
            } else {
                _queryParams["ticket.channels"] = ticketChannels;
            }
        }

        if (ticketGroup != null) {
            if (Array.isArray(ticketGroup)) {
                _queryParams["ticket.group"] = ticketGroup.map((item) => item);
            } else {
                _queryParams["ticket.group"] = ticketGroup;
            }
        }

        if (ticketIsSpam != null) {
            _queryParams["ticket.is_spam"] = ticketIsSpam.toString();
        }

        if (ticketNeedsResponse != null) {
            _queryParams["ticket.needs_response"] = ticketNeedsResponse.toString();
        }

        if (ticketRevOrg != null) {
            if (Array.isArray(ticketRevOrg)) {
                _queryParams["ticket.rev_org"] = ticketRevOrg.map((item) => item);
            } else {
                _queryParams["ticket.rev_org"] = ticketRevOrg;
            }
        }

        if (ticketSeverity != null) {
            if (Array.isArray(ticketSeverity)) {
                _queryParams["ticket.severity"] = ticketSeverity.map((item) => item);
            } else {
                _queryParams["ticket.severity"] = ticketSeverity;
            }
        }

        if (ticketSlaSummaryStage != null) {
            if (Array.isArray(ticketSlaSummaryStage)) {
                _queryParams["ticket.sla_summary.stage"] = ticketSlaSummaryStage.map((item) => item);
            } else {
                _queryParams["ticket.sla_summary.stage"] = ticketSlaSummaryStage;
            }
        }

        if (ticketSourceChannel != null) {
            if (Array.isArray(ticketSourceChannel)) {
                _queryParams["ticket.source_channel"] = ticketSourceChannel.map((item) => item);
            } else {
                _queryParams["ticket.source_channel"] = ticketSourceChannel;
            }
        }

        if (ticketSubtype != null) {
            if (Array.isArray(ticketSubtype)) {
                _queryParams["ticket.subtype"] = ticketSubtype.map((item) => item);
            } else {
                _queryParams["ticket.subtype"] = ticketSubtype;
            }
        }

        if (type_ != null) {
            if (Array.isArray(type_)) {
                _queryParams["type"] = type_.map((item) => item);
            } else {
                _queryParams["type"] = type_;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.export"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksExportResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Exports a collection of work items.
     *
     * @param {DevRev.WorksExportRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.exportPost()
     */
    public async exportPost(
        request: DevRev.WorksExportRequest = {},
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksExportResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.export"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksExportRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksExportResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a work item's information.
     *
     * @param {DevRev.WorksGetQuery} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.NotFoundError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.get({
     *         id: "string"
     *     })
     */
    public async get(
        request: DevRev.WorksGetQuery,
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksGetResponse> {
        const { id } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        _queryParams["id"] = id;
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.get"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new DevRev.NotFoundError(
                        serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets a work item's information.
     *
     * @param {DevRev.WorksGetRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.NotFoundError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.getPost({
     *         id: "string"
     *     })
     */
    public async getPost(
        request: DevRev.WorksGetRequest,
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksGetResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.get"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksGetRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new DevRev.NotFoundError(
                        serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists a collection of work items.
     *
     * @param {DevRev.WorksListQuery} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.list()
     */
    public async list(
        request: DevRev.WorksListQuery = {},
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksListResponse> {
        const {
            appliesToPart,
            createdBy,
            cursor,
            customFields,
            issueAccounts,
            issuePriority,
            issuePriorityV2,
            issueRevOrgs,
            issueSlaSummaryStage,
            issueSprint,
            issueSubtype,
            limit,
            mode,
            opportunityAccount,
            opportunityContacts,
            opportunitySubtype,
            ownedBy,
            reportedBy,
            sortBy,
            stageName,
            stagedInfoIsStaged,
            syncMetadataLastSyncInStatus,
            syncMetadataLastSyncInSyncUnit,
            syncMetadataLastSyncOutStatus,
            syncMetadataLastSyncOutSyncUnit,
            syncMetadataOriginSystem,
            tags,
            ticketChannels,
            ticketGroup,
            ticketIsSpam,
            ticketNeedsResponse,
            ticketRevOrg,
            ticketSeverity,
            ticketSlaSummaryStage,
            ticketSourceChannel,
            ticketSubtype,
            type: type_,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (appliesToPart != null) {
            if (Array.isArray(appliesToPart)) {
                _queryParams["applies_to_part"] = appliesToPart.map((item) => item);
            } else {
                _queryParams["applies_to_part"] = appliesToPart;
            }
        }

        if (createdBy != null) {
            if (Array.isArray(createdBy)) {
                _queryParams["created_by"] = createdBy.map((item) => item);
            } else {
                _queryParams["created_by"] = createdBy;
            }
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (customFields != null) {
            _queryParams["custom_fields"] = JSON.stringify(customFields);
        }

        if (issueAccounts != null) {
            if (Array.isArray(issueAccounts)) {
                _queryParams["issue.accounts"] = issueAccounts.map((item) => item);
            } else {
                _queryParams["issue.accounts"] = issueAccounts;
            }
        }

        if (issuePriority != null) {
            if (Array.isArray(issuePriority)) {
                _queryParams["issue.priority"] = issuePriority.map((item) => item);
            } else {
                _queryParams["issue.priority"] = issuePriority;
            }
        }

        if (issuePriorityV2 != null) {
            if (Array.isArray(issuePriorityV2)) {
                _queryParams["issue.priority_v2"] = issuePriorityV2.map((item) => item.toString());
            } else {
                _queryParams["issue.priority_v2"] = issuePriorityV2.toString();
            }
        }

        if (issueRevOrgs != null) {
            if (Array.isArray(issueRevOrgs)) {
                _queryParams["issue.rev_orgs"] = issueRevOrgs.map((item) => item);
            } else {
                _queryParams["issue.rev_orgs"] = issueRevOrgs;
            }
        }

        if (issueSlaSummaryStage != null) {
            if (Array.isArray(issueSlaSummaryStage)) {
                _queryParams["issue.sla_summary.stage"] = issueSlaSummaryStage.map((item) => item);
            } else {
                _queryParams["issue.sla_summary.stage"] = issueSlaSummaryStage;
            }
        }

        if (issueSprint != null) {
            if (Array.isArray(issueSprint)) {
                _queryParams["issue.sprint"] = issueSprint.map((item) => item);
            } else {
                _queryParams["issue.sprint"] = issueSprint;
            }
        }

        if (issueSubtype != null) {
            if (Array.isArray(issueSubtype)) {
                _queryParams["issue.subtype"] = issueSubtype.map((item) => item);
            } else {
                _queryParams["issue.subtype"] = issueSubtype;
            }
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (mode != null) {
            _queryParams["mode"] = mode;
        }

        if (opportunityAccount != null) {
            if (Array.isArray(opportunityAccount)) {
                _queryParams["opportunity.account"] = opportunityAccount.map((item) => item);
            } else {
                _queryParams["opportunity.account"] = opportunityAccount;
            }
        }

        if (opportunityContacts != null) {
            if (Array.isArray(opportunityContacts)) {
                _queryParams["opportunity.contacts"] = opportunityContacts.map((item) => item);
            } else {
                _queryParams["opportunity.contacts"] = opportunityContacts;
            }
        }

        if (opportunitySubtype != null) {
            if (Array.isArray(opportunitySubtype)) {
                _queryParams["opportunity.subtype"] = opportunitySubtype.map((item) => item);
            } else {
                _queryParams["opportunity.subtype"] = opportunitySubtype;
            }
        }

        if (ownedBy != null) {
            if (Array.isArray(ownedBy)) {
                _queryParams["owned_by"] = ownedBy.map((item) => item);
            } else {
                _queryParams["owned_by"] = ownedBy;
            }
        }

        if (reportedBy != null) {
            if (Array.isArray(reportedBy)) {
                _queryParams["reported_by"] = reportedBy.map((item) => item);
            } else {
                _queryParams["reported_by"] = reportedBy;
            }
        }

        if (sortBy != null) {
            if (Array.isArray(sortBy)) {
                _queryParams["sort_by"] = sortBy.map((item) => item);
            } else {
                _queryParams["sort_by"] = sortBy;
            }
        }

        if (stageName != null) {
            if (Array.isArray(stageName)) {
                _queryParams["stage.name"] = stageName.map((item) => item);
            } else {
                _queryParams["stage.name"] = stageName;
            }
        }

        if (stagedInfoIsStaged != null) {
            _queryParams["staged_info.is_staged"] = stagedInfoIsStaged.toString();
        }

        if (syncMetadataLastSyncInStatus != null) {
            if (Array.isArray(syncMetadataLastSyncInStatus)) {
                _queryParams["sync_metadata.last_sync_in.status"] = syncMetadataLastSyncInStatus.map((item) => item);
            } else {
                _queryParams["sync_metadata.last_sync_in.status"] = syncMetadataLastSyncInStatus;
            }
        }

        if (syncMetadataLastSyncInSyncUnit != null) {
            if (Array.isArray(syncMetadataLastSyncInSyncUnit)) {
                _queryParams["sync_metadata.last_sync_in.sync_unit"] = syncMetadataLastSyncInSyncUnit.map(
                    (item) => item
                );
            } else {
                _queryParams["sync_metadata.last_sync_in.sync_unit"] = syncMetadataLastSyncInSyncUnit;
            }
        }

        if (syncMetadataLastSyncOutStatus != null) {
            if (Array.isArray(syncMetadataLastSyncOutStatus)) {
                _queryParams["sync_metadata.last_sync_out.status"] = syncMetadataLastSyncOutStatus.map((item) => item);
            } else {
                _queryParams["sync_metadata.last_sync_out.status"] = syncMetadataLastSyncOutStatus;
            }
        }

        if (syncMetadataLastSyncOutSyncUnit != null) {
            if (Array.isArray(syncMetadataLastSyncOutSyncUnit)) {
                _queryParams["sync_metadata.last_sync_out.sync_unit"] = syncMetadataLastSyncOutSyncUnit.map(
                    (item) => item
                );
            } else {
                _queryParams["sync_metadata.last_sync_out.sync_unit"] = syncMetadataLastSyncOutSyncUnit;
            }
        }

        if (syncMetadataOriginSystem != null) {
            if (Array.isArray(syncMetadataOriginSystem)) {
                _queryParams["sync_metadata.origin_system"] = syncMetadataOriginSystem.map((item) => item);
            } else {
                _queryParams["sync_metadata.origin_system"] = syncMetadataOriginSystem;
            }
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                _queryParams["tags"] = tags.map((item) => item);
            } else {
                _queryParams["tags"] = tags;
            }
        }

        if (ticketChannels != null) {
            if (Array.isArray(ticketChannels)) {
                _queryParams["ticket.channels"] = ticketChannels.map((item) => item);
            } else {
                _queryParams["ticket.channels"] = ticketChannels;
            }
        }

        if (ticketGroup != null) {
            if (Array.isArray(ticketGroup)) {
                _queryParams["ticket.group"] = ticketGroup.map((item) => item);
            } else {
                _queryParams["ticket.group"] = ticketGroup;
            }
        }

        if (ticketIsSpam != null) {
            _queryParams["ticket.is_spam"] = ticketIsSpam.toString();
        }

        if (ticketNeedsResponse != null) {
            _queryParams["ticket.needs_response"] = ticketNeedsResponse.toString();
        }

        if (ticketRevOrg != null) {
            if (Array.isArray(ticketRevOrg)) {
                _queryParams["ticket.rev_org"] = ticketRevOrg.map((item) => item);
            } else {
                _queryParams["ticket.rev_org"] = ticketRevOrg;
            }
        }

        if (ticketSeverity != null) {
            if (Array.isArray(ticketSeverity)) {
                _queryParams["ticket.severity"] = ticketSeverity.map((item) => item);
            } else {
                _queryParams["ticket.severity"] = ticketSeverity;
            }
        }

        if (ticketSlaSummaryStage != null) {
            if (Array.isArray(ticketSlaSummaryStage)) {
                _queryParams["ticket.sla_summary.stage"] = ticketSlaSummaryStage.map((item) => item);
            } else {
                _queryParams["ticket.sla_summary.stage"] = ticketSlaSummaryStage;
            }
        }

        if (ticketSourceChannel != null) {
            if (Array.isArray(ticketSourceChannel)) {
                _queryParams["ticket.source_channel"] = ticketSourceChannel.map((item) => item);
            } else {
                _queryParams["ticket.source_channel"] = ticketSourceChannel;
            }
        }

        if (ticketSubtype != null) {
            if (Array.isArray(ticketSubtype)) {
                _queryParams["ticket.subtype"] = ticketSubtype.map((item) => item);
            } else {
                _queryParams["ticket.subtype"] = ticketSubtype;
            }
        }

        if (type_ != null) {
            if (Array.isArray(type_)) {
                _queryParams["type"] = type_.map((item) => item);
            } else {
                _queryParams["type"] = type_;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.list"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists a collection of work items.
     *
     * @param {DevRev.WorksListRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.listPost()
     */
    public async listPost(
        request: DevRev.WorksListRequest = {},
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksListResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.list"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksListRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates a work item's information.
     *
     * @param {DevRev.WorksUpdateRequest} request
     * @param {Works.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link DevRev.BadRequestError}
     * @throws {@link DevRev.UnauthorizedError}
     * @throws {@link DevRev.ForbiddenError}
     * @throws {@link DevRev.NotFoundError}
     * @throws {@link DevRev.TooManyRequestsError}
     * @throws {@link DevRev.InternalServerError}
     * @throws {@link DevRev.ServiceUnavailableError}
     *
     * @example
     *     await client.works.update({
     *         type: "issue",
     *         appliesToPart: "string",
     *         artifacts: {},
     *         body: "string",
     *         customFields: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         },
     *         customSchemaFragments: ["string"],
     *         customSchemaSpec: {
     *             apps: ["string"],
     *             subtype: "string",
     *             tenantFragment: true,
     *             validateRequiredFields: true
     *         },
     *         id: "string",
     *         ownedBy: {},
     *         reportedBy: {},
     *         stage: {
     *             name: "string",
     *             stage: "string"
     *         },
     *         stageValidationOptions: ["allow_invalid_transition"],
     *         stagedInfo: {},
     *         tags: {},
     *         targetCloseDate: new Date("2024-01-15T09:30:00.000Z"),
     *         title: "string",
     *         developedWith: {},
     *         priority: DevRev.IssuePriority.P0,
     *         priorityV2: 1,
     *         sprint: "string",
     *         targetStartDate: new Date("2024-01-15T09:30:00.000Z")
     *     })
     */
    public async update(
        request: DevRev.WorksUpdateRequest,
        requestOptions?: Works.RequestOptions
    ): Promise<DevRev.WorksUpdateResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.DevRevEnvironment.Default,
                "works.update"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@devrev/api",
                "X-Fern-SDK-Version": "0.0.14",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.WorksUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.WorksUpdateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                skipValidation: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRev.BadRequestError(
                        serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 401:
                    throw new DevRev.UnauthorizedError(
                        serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 403:
                    throw new DevRev.ForbiddenError(
                        serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new DevRev.NotFoundError(
                        serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 429:
                    throw new DevRev.TooManyRequestsError(
                        serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new DevRev.InternalServerError(
                        serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 503:
                    throw new DevRev.ServiceUnavailableError(
                        serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.DevRevError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevTimeoutError();
            case "unknown":
                throw new errors.DevRevError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["DEVREV_TOKEN"];
        if (bearer == null) {
            throw new errors.DevRevError({
                message: "Please specify DEVREV_TOKEN when instantiating the client.",
            });
        }

        return `Bearer ${bearer}`;
    }
}
